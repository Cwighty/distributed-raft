@rendermode RenderMode.InteractiveServer
@page "/processing"
@using Raft.Data.Services;
@using Raft.Data.Models;
@using Raft.Shop.Components.Shared
@inject IOrderService OrderService;

<PageTitle>Order Processing</PageTitle>

<h3>Orders</h3>
<hr />
@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (orders.Count == 0)
    {
        <p><em>No orders found</em></p>
    }
    else if (processing)
    {
        <p><em>Processing...</em></p>
    }
    else
    {
        <div class="accordion" id="orderAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header" id="pendingHeading">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#pendingCollapse" aria-expanded="false" aria-controls="pendingCollapse">
                        Pending (@(orders.Count(o => o.Status.Contains("pending"))))
                    </button>
                </h2>
                <div id="pendingCollapse" class="accordion-collapse collapse" aria-labelledby="pendingHeading" data-bs-parent="#orderAccordion">
                    <div class="accordion-body d-flex flex-wrap">
                        @if (!orders.Any(o => o.Status.Contains("pending")))
                        {
                            <p><em>No pending orders</em></p>
                        }
                        @foreach (var order in orders.Where(o => o.Status.Contains("pending")))
                        {
                            <div class="m-2">
                                <OrderDetail OrderInfo="order.OrderInfo" OrderId="order.Id" Status="@order.Status">
                                    <Action>
                                        <button class="btn btn-primary" @onclick="() => ProcessOrder(order.Id)">Process</button>
                                    </Action>
                                </OrderDetail>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="accordion-item">
                <h2 class="accordion-header" id="processedHeading">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#processedCollapse" aria-expanded="false" aria-controls="processedCollapse">
                        Processed (@(orders.Count(o => o.Status.Contains("processed"))))
                    </button>
                </h2>
                <div id="processedCollapse" class="accordion-collapse collapse" aria-labelledby="processedHeading" data-bs-parent="#orderAccordion">
                    <div class="accordion-body d-flex flex-wrap">
                        @if (!orders.Any(o => o.Status.Contains("processed")))
                        {
                            <p><em>No processed orders</em></p>
                        }
                        @foreach (var order in orders.Where(o => o.Status.Contains("processed")))
                        {
                            <div class="my-2">
                                <OrderDetail OrderInfo="order.OrderInfo" OrderId="order.Id" Status="@order.Status"  />
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="accordion-item">
                <h2 class="accordion-header" id="failedHeading">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#failedCollapse" aria-expanded="false" aria-controls="failedCollapse">
                        Failed (@(orders.Count(o => o.Status.Contains("rejected"))))
                    </button>
                </h2>
                <div id="failedCollapse" class="accordion-collapse collapse" aria-labelledby="failedHeading" data-bs-parent="#orderAccordion">
                    <div class="accordion-body d-flex flex-wrap">
                        @if (!orders.Any(o => o.Status.Contains("rejected")))
                        {
                            <p><em>No failed orders</em></p>
                        }
                        @foreach (var order in orders.Where(o => o.Status.Contains("rejected")))
                        {
                            <div class="my-2">
                                <OrderDetail OrderInfo="order.OrderInfo" OrderId="order.Id" Status="@order.Status" />
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

@code 
{

    private List<Order> orders;
    private bool processing = false;
    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetOrdersAsync();
    }

    private async Task ProcessOrder(Guid orderId)
    {
        Console.WriteLine($"Processing order {orderId}");
        processing = true;
        await OrderService.ProcessOrderAsync(orderId);
        processing = false;
        orders = await OrderService.GetOrdersAsync();
    }
}
