@page "/"
@rendermode InteractiveServer
@using Raft.Data.Models;
@using Raft.Data.Services;
@inject IOrderService OrderService

<PageTitle>Shop</PageTitle>

<h3>Shop</h3>
<hr/>
<h4>Products</h4>
<div class="text-center mb-2">
    <label for="filter" class="form-label">Filter products</label>
    <input type="text" @bind-value="@filter" @bind-value:event="oninput" class="form-control" placeholder="Filter by name..." style="max-width: 500px; margin: auto;">
</div>
@if (products == null || !products.Any())
{
    <div class="alert alert-info" role="alert">
        Loading products...
    </div>
}
else
{
    <div class="d-flex flex-wrap justify-content-start">
        @foreach (var product in products.Where(p => p.Name.Contains(filter, StringComparison.OrdinalIgnoreCase)))
        {
            <div class="card m-2" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title mb-2">@product.Name</h5>
                    <div class="d-flex justify-content-between">
                        <h6 class="card-subtitle mb-2 text-muted">Price: @product.Price.ToString("C")</h6>
                    </div>
                    <div class="card-text">
                        @if(showDescription.TryGetValue(product.Id, out var show) && show)
                        {
                            @product.Description
                            <button class="btn btn-link" @onclick="() => ToggleDescription(product)">Read less</button>
                        }
                        else if (product.Description.Length > 100)
                        {
                            <div class="text-truncate">@product.Description.Substring(0, 100)</div>
                            <button class="btn btn-link ms-0 ps-0" @onclick="() => ToggleDescription(product)">Read more</button>
                        }
                    </div>
                    <div class="mt-2 d-flex justify-content-end">
                        <button class="btn btn-primary" @onclick="() => AddToCart(product)">Add to cart</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

<h4 class="mt-3">Cart</h4>
@if (orderInfo.Products == null || !orderInfo.Products.Any())
{
    <div class="alert alert-info" role="alert">
        Add products to your cart by clicking the "Add to cart" button on a product.
    </div>
}
else
{
    <div class="d-flex flex-wrap justify-content-start">
        <div class="card m-2" style="width: 18rem;">
            <div class="card-body">
                <div>
                    <label for="username" class="form-label">Name</label>
                    <input type="text" @bind-value="@orderInfo.Username" @bind-value:event="oninput" class="form-control" placeholder="Required" style="max-width: 500px; margin: auto;">
                </div>
            <div class="mt-2 d-flex justify-content-between">
                <div class="card-subtitle my-auto text-muted">
                    Total: @orderInfo.Products.Sum(p => p.Price).ToString("C")
                </div>
                <button class="btn btn-success" disabled=@(String.IsNullOrEmpty(orderInfo.Username)) @onclick="() => OrderService.CreateOrderAsync(orderInfo)">Place order</button>
            </div>
            </div>
        </div>
        @foreach (var product in orderInfo.Products.Where(p => p.Name.Contains(filter, StringComparison.OrdinalIgnoreCase)))
        {
            <div class="card m-2" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title mb-2">@product.Name</h5>
                    <div class="d-flex justify-content-between">
                        <h6 class="card-subtitle mb-2 text-muted">Price: @product.Price.ToString("C")</h6>
                    </div>
                    <div class="mt-2 d-flex justify-content-end">
                        <button class="btn btn-primary" @onclick="() => RemoveFromCart(product)">Remove</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Product> products = new List<Product>();
    private List<Product> cart = new List<Product>();
    private OrderInfo orderInfo = new OrderInfo();
    private string filter = "";
    private Dictionary<int, bool> showDescription = new Dictionary<int, bool>();

    protected override void OnInitialized()
    {
       products = ProductsData.GetProducts(); 
    }

    private void ToggleDescription(Product product)
    {
        if (showDescription.TryGetValue(product.Id, out var show))
        {
            showDescription[product.Id] = !show;
        }
        else
        {
            showDescription.Add(product.Id, true);
        }
    }

    private void AddToCart(Product product)
    {
        orderInfo.Products.Add(product);
        StateHasChanged();
    }

    private void RemoveFromCart(Product product)
    {
        orderInfo.Products.Remove(product);
        StateHasChanged();
    }
}
